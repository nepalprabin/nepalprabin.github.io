---
categories:
  - leetcode
date: "2023-12-12"
image: /images/leetcode.png
mainfont: serif
title: 'Leetcode - Grind75'
draft: true
---

This is my log of working on different leetcode problems, mainly [Grind75](!https://www.techinterviewhandbook.org/grind75) problems. 

## 1. [Two Sum](https://leetcode.com/problems/two-sum/)
<i>Problem Statement: 

Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.</i>

Solutions
---------------

a. Brute Force
- Brute Force method iterates through all pair of elements in the array and checks if their sum is equal to the target value.
- Time complexity while iterating over all elements is O(n^2), n being the length of the array
- Space complexity is O(1)

```python
def two_sum_brute_force(nums, target):
    output = []
    if len(nums) == 2:
        return [0,1]
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]
```

b. Hash Map:
- Hashmap uses key value pair where we add each value and its index to the dictionary. Then, we iterate through the array to see if the number's complement (target-value) is present in the dictionary
- Time complexity: O(n), we iterate through the array only once
- Space complexity: O(n)
```python
def two_sum_hashmap(nums, target):
    dict_ = {}
    for i, val in enumerate(nums):
        result = target - val
        if result in dict_:
            return [dict_[result], i]
        dict_[val] = i
```


## 2. [Valid Parenthesis](https://leetcode.com/problems/valid-parentheses/)
<i> Problem Statement

Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and ']', determine if the input string is valid.

An input string is valid if:

- Open brackets must be closed by the same type of brackets.
- Open brackets must be closed in the correct order.
- Every close bracket has a corresponding open bracket of the same type.
</i>

Solution
---------
```python
def valid_parenthesis():
    stack = []
    for c in s:
        if c in ['(','{','[']:
            stack.append(c)
            print(stack)
        elif c == ')' and len(s) != 0 and stack[-1] == '(':
            stack.pop()
        elif c == '}' and len(s) != 0 and stack[-1] == '{':
            stack.pop()
        elif c == ']' and len(s) != 0 and stack[-1] == '[':
            stack.pop()
        else: 
            return False
    return stack == []
```


## 2. [Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)
<i>
You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.
</i>


Solution
---------